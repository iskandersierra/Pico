using System.Reflection;
using System.Text.RegularExpressions;

namespace Pico.Tests;

public partial class ReflectionExtensionsTests
{
    [Theory]
    [InlineData(typeof(string), "string")]
    [InlineData(typeof(char), "char")]
    [InlineData(typeof(byte), "byte")]
    [InlineData(typeof(sbyte), "sbyte")]
    [InlineData(typeof(short), "short")]
    [InlineData(typeof(ushort), "ushort")]
    [InlineData(typeof(int), "int")]
    [InlineData(typeof(uint), "uint")]
    [InlineData(typeof(long), "long")]
    [InlineData(typeof(ulong), "ulong")]
    [InlineData(typeof(float), "float")]
    [InlineData(typeof(double), "double")]
    [InlineData(typeof(decimal), "decimal")]
    [InlineData(typeof(bool), "bool")]
    [InlineData(typeof(DateTime), "DateTime")]
    [InlineData(typeof(DateTimeOffset), "DateTimeOffset")]
    [InlineData(typeof(DateOnly), "DateOnly")]
    [InlineData(typeof(TimeOnly), "TimeOnly")]
    [InlineData(typeof(TimeSpan), "TimeSpan")]
    [InlineData(typeof(Type), "Type")]
    [InlineData(typeof(Regex), "Regex")]
    [InlineData(typeof(Assembly), "Assembly")]
    [InlineData(typeof(ArraySegment<string>), "ArraySegment<string>")]
    [InlineData(typeof(Action<string>), "Action<string>")]
    [InlineData(typeof(Action<string, int>), "Action<string, int>")]
    [InlineData(typeof(Action<string, int, bool>), "Action<string, int, bool>")]
    [InlineData(typeof(Func<string>), "Func<string>")]
    [InlineData(typeof(Func<string, int>), "Func<string, int>")]
    [InlineData(typeof(Func<string, int, bool>), "Func<string, int, bool>")]
    [InlineData(typeof(Predicate<string>), "Predicate<string>")]
    [InlineData(typeof(List<string>), "List<string>")]
    [InlineData(typeof(IList<string>), "IList<string>")]
    [InlineData(typeof(ICollection<string>), "ICollection<string>")]
    [InlineData(typeof(IEnumerator<string>), "IEnumerator<string>")]
    [InlineData(typeof(IEnumerable<string>), "IEnumerable<string>")]
    [InlineData(typeof(IDictionary<string, int>), "IDictionary<string, int>")]
    [InlineData(typeof(Dictionary<string, int>), "Dictionary<string, int>")]
    [InlineData(typeof(Dictionary<string, List<int>>), "Dictionary<string, List<int>>")]
    [InlineData(typeof(int[]), "int[]")]
    [InlineData(typeof(int[][]), "int[][]")]
    [InlineData(typeof(int[,]), "int[,]")]
    [InlineData(typeof(List<Regex>[,]), "List<Regex>[,]")]
    [InlineData(typeof(int*), "int*")]
    [InlineData(typeof(int**), "int**")]
    public void ToDebugString(Type type, string expected) =>
        type.ToDebugString().Should().Be(expected);

    [Theory]
    [InlineData(typeof(string), "string")]
    [InlineData(typeof(char), "char")]
    [InlineData(typeof(byte), "byte")]
    [InlineData(typeof(sbyte), "sbyte")]
    [InlineData(typeof(short), "short")]
    [InlineData(typeof(ushort), "ushort")]
    [InlineData(typeof(int), "int")]
    [InlineData(typeof(uint), "uint")]
    [InlineData(typeof(long), "long")]
    [InlineData(typeof(ulong), "ulong")]
    [InlineData(typeof(float), "float")]
    [InlineData(typeof(double), "double")]
    [InlineData(typeof(decimal), "decimal")]
    [InlineData(typeof(bool), "bool")]
    [InlineData(typeof(DateTime), "DateTime")]
    [InlineData(typeof(DateTimeOffset), "DateTimeOffset")]
    [InlineData(typeof(DateOnly), "DateOnly")]
    [InlineData(typeof(TimeOnly), "TimeOnly")]
    [InlineData(typeof(TimeSpan), "TimeSpan")]
    [InlineData(typeof(Type), "Type")]
    [InlineData(typeof(Regex), "Regex")]
    [InlineData(typeof(Assembly), "System.Reflection.Assembly")]
    [InlineData(typeof(ArraySegment<string>), "System.ArraySegment<string>")]
    [InlineData(typeof(Action<string>), "Action<string>")]
    [InlineData(typeof(Action<string, int>), "Action<string, int>")]
    [InlineData(typeof(Action<string, int, bool>), "Action<string, int, bool>")]
    [InlineData(typeof(Func<string>), "Func<string>")]
    [InlineData(typeof(Func<string, int>), "Func<string, int>")]
    [InlineData(typeof(Func<string, int, bool>), "Func<string, int, bool>")]
    [InlineData(typeof(Predicate<string>), "Predicate<string>")]
    [InlineData(typeof(List<string>), "List<string>")]
    [InlineData(typeof(IList<string>), "IList<string>")]
    [InlineData(typeof(ICollection<string>), "ICollection<string>")]
    [InlineData(typeof(IEnumerator<string>), "IEnumerator<string>")]
    [InlineData(typeof(IEnumerable<string>), "IEnumerable<string>")]
    [InlineData(typeof(IDictionary<string, int>), "IDictionary<string, int>")]
    [InlineData(typeof(Dictionary<string, int>), "Dictionary<string, int>")]
    [InlineData(typeof(Dictionary<string, List<int>>), "Dictionary<string, List<int>>")]
    [InlineData(typeof(int[]), "int[]")]
    [InlineData(typeof(int[][]), "int[][]")]
    [InlineData(typeof(int[,]), "int[,]")]
    [InlineData(typeof(List<Regex>[,]), "List<Regex>[,]")]
    [InlineData(typeof(int*), "int*")]
    [InlineData(typeof(int**), "int**")]
    public void ToDebugStringFullyQualified(Type type, string expected) =>
        type.ToDebugString(true).Should().Be(expected);
}
